== catppuccin.lua ==
local M = {}

function M.setup()
  require('catppuccin').setup {
    flavour = 'mocha',
    transparent_backgroun = true,
    term_colors = true,
    integrations = {
      cmp         = true,
      gitsigns    = true,
      treesitter  = true,
    },
  }

  vim.cmd.colorscheme('catppuccin')

  local opaque = '#1e1e1e'
  vim.api.nvim_set_hl(0, 'SignColumn',    { bg = opaque })
  vim.api.nvim_set_hl(0, 'LineNr',        { bg = opaque })
  vim.api.nvim_set_hl(0, 'CursorLineNr',  { bg = opaque, bold = true })

  vim.opt.colorcolumn = { '80' }
  vim.api.nvim_set_hl(0, 'ColorColumn', { bg = '#303030' })
end

return M
== init.lua ==
local M = {}

function M.setup()
  -- bootstrap lazy.nvim
  local lazypath = vim.fn.stdpath('data') .. '/lazy/lazy.nvim'
  if not vim.loop.fs_stat(lazypath) then
    vim.fn.system({
      'git', 'clone', '--filter=blob:none',
      'https://github.com/folke/lazy.nvim.git', lazypath,
    })
  end
  vim.opt.rtp:prepend(lazypath)

  local plugins = {
    -- Treesitter core
    {
      'nvim-treesitter/nvim-treesitter',
      build  = ':TSUpdate',
      lazy   = false,
      config = function() 
        require('plugins.nvim-treesitter').setup() 
      end,
    },
    -- Treesitter - textobjects
    {
      'nvim-treesitter/nvim-treesitter-textobjects',
      lazy = false,
      dependencies = { 'nvim-treesitter/nvim-treesitter' },
      config = function()
        require('plugins.nvim-treesitter-textobjects').setup()
      end,
    },

    -- Mason + LSP
    {
      'williamboman/mason.nvim',
      build = ':MasonUpdate',
      cmd   = 'Mason',
    },
    {
      'williamboman/mason-lspconfig.nvim',
      dependencies = { 'williamboman/mason.nvim' },
      config = function() require('plugins.mason').setup() end,
    },
    {
      'neovim/nvim-lspconfig',
      dependencies = { 'williamboman/mason-lspconfig.nvim' },
      config = function() require('plugins.nvim-lspconfig').setup() end,
    },

    -- Theme
    {
      'catppuccin/nvim',
      name      = 'catppuccin',
      priority  = 1000,
      config    = function() require('plugins.catppuccin').setup() end,
    },

    -- Mini statusline
    {
      'echasnovski/mini.statusline',
      version = false,
      config  = function() require('plugins.mini').setup() end,
    },
  }

  require('lazy').setup(plugins)
end

return M
== mason.lua ==
local M = {}

function M.setup()
  require('mason').setup()
  require('mason-lspconfig').setup {
    ensure_installed = {
      'ansiblels','asm_lsp','awk_ls','bashls','clangd','cmake',
      'csharp_ls','cssls','css_variables','cssmodules_ls','fish_lsp',
      'gopls','html','java_language_server','jinja_lsp','jsonls',
      'julials','lua_ls','markdown_oxide','nginx_language_server',
      'pylsp','sqls','systemd_ls','ts_ls','vimls','yamlls',
    },
    automatic_installation = true,
  }
end

return M
== mini.lua ==
local M = {}

function M.setup()
  require('mini.statusline').setup {}
end

return M
== nvim-lspconfig.lua ==
local M = {}

function M.setup()
  local lspconfig = require("lspconfig")
  lspconfig.clangd.setup({})
  lspconfig.ansiblels.setup({})
  lspconfig.asm_lsp.setup({})
  lspconfig.awk_ls.setup({})
  lspconfig.bashls.setup({})
  lspconfig.cmake.setup({})
  lspconfig.cssls.setup({})
  lspconfig.css_variables.setup({})
  lspconfig.cssmodules_ls.setup({})
  lspconfig.html.setup({})
  lspconfig.java_language_server.setup({})
  lspconfig.jinja_lsp.setup({})
  lspconfig.jsonls.setup({})
  lspconfig.julials.setup({})
  lspconfig.lua_ls.setup({
    settings = {
      Lua = {
        diagnostics = {
          globals = {"vim"},    -- stop "undefined global" warnings
        },
        workspace = {
          library = vim.api.nvim_get_runtime_file("", true),
          checkThirdParty = false, --remove annoying prompt
        },
      },
    },
  })
  lspconfig.markdown_oxide.setup({})
  lspconfig.nginx_language_server.setup({})
  lspconfig.pylsp.setup({})
  lspconfig.systemd_ls.setup({})
  lspconfig.ts_ls.setup({})
  lspconfig.vimls.setup({})
  lspconfig.yamlls.setup({})
end
== nvim-treesitter.lua ==
local M = {}

M.parsers = {
  'asm','awk','bash','c','c_sharp','cmake','cpp','css','csv','cuda',
  'diff','fish','git_config','git_rebase','gitcommit','gitignore','go',
  'html','java','javascript','jinja','json','julia','lua','luadoc',
  'markdown','nginx','python','regex','sql','toml','typescript','udev',
  'vim','vimdoc','yaml','zig',
}

function M.setup()
  require('nvim-treesitter.configs').setup {
    ensure_installed  = M.parsers,
    auto_install      = true,
    sync_install      = false,
    highlight         = { enable = true },
    indent            = { enable = true },
    
    incremental_selection = {
      enable = true,
      keymaps = {
        init_selection      = "<Enter>", -- set to `false` to disable one of the mappings
        node_incremental    = "<Enter>",
        scope_incremenetal  = false,
        node_decremental    = "<Backspace>",
      },
    },
  }

  -- folding / indent helpers
  vim.wo.foldexpr     = 'v:lua.vim.treesitter.foldexpr()'
  vim.bo.indentexpr   = "v:lua.require'nvim-treesitter'.indentexpr()"
end

return M
== nvim-treesitter-textobjects.lua ==
-- configuration
require("nvim-treesitter-textobjects").setup {
  select = {
    -- Automatically jump forward to textobj, similar to targets.vim
    lookahead = true,
    -- You can choose the select mode (default is charwise 'v')
    --
    -- Can also be a function which gets passed a table with the keys
    -- * query_string: eg '@function.inner'
    -- * method: eg 'v' or 'o'
    -- and should return the mode ('v', 'V', or '<c-v>') or a table
    -- mapping query_strings to modes.
    selection_modes = {
      ['@parameter.outer'] = 'v', -- charwise
      ['@function.outer'] = 'V', -- linewise
      ['@class.outer'] = '<c-v>', -- blockwise
    },
    -- If you set this to `true` (default is `false`) then any textobject is
    -- extended to include preceding or succeeding whitespace. Succeeding
    -- whitespace has priority in order to act similarly to eg the built-in
    -- `ap`.
    --
    -- Can also be a function which gets passed a table with the keys
    -- * query_string: eg '@function.inner'
    -- * selection_mode: eg 'v'
    -- and should return true of false
    include_surrounding_whitespace = false,

  },
  move = {
    -- whether to set jumps in the jumplist
    set_jumps = true,
  },
}

-- keymaps
-- Text objects: select
-- You can use the capture groups defined in `textobjects.scm`
vim.keymap.set({ "x", "o" }, "af", function()
  require "nvim-treesitter-textobjects.select".select_textobject("@function.outer", "textobjects")
end)
vim.keymap.set({ "x", "o" }, "if", function()
  require "nvim-treesitter-textobjects.select".select_textobject("@function.inner", "textobjects")
end)
vim.keymap.set({ "x", "o" }, "ac", function()
  require "nvim-treesitter-textobjects.select".select_textobject("@class.outer", "textobjects")
end)
vim.keymap.set({ "x", "o" }, "ic", function()
  require "nvim-treesitter-textobjects.select".select_textobject("@class.inner", "textobjects")
end)
-- You can also use captures from other query groups like `locals.scm`
vim.keymap.set({ "x", "o" }, "as", function()
  require "nvim-treesitter-textobjects.select".select_textobject("@local.scope", "locals")
end)

-- Text objects: swap
vim.keymap.set("n", "<leader>a", function()
  require("nvim-treesitter-textobjects.swap").swap_next "@parameter.inner"
end)
vim.keymap.set("n", "<leader>A", function()
  require("nvim-treesitter-textobjects.swap").swap_previous "@parameter.outer"
end)
vim.keymap.set({ "n", "x", "o" }, "]m", function()
  require("nvim-treesitter-textobjects.move").goto_next_start("@function.outer", "textobjects")
end)
vim.keymap.set({ "n", "x", "o" }, "]]", function()
  require("nvim-treesitter-textobjects.move").goto_next_start("@class.outer", "textobjects")
end)
-- You can also pass a list to group multiple queries.
vim.keymap.set({ "n", "x", "o" }, "]o", function()
  move.goto_next_start({"@loop.inner", "@loop.outer"}, "textobjects")
end)
-- You can also use captures from other query groups like `locals.scm` or `folds.scm`
vim.keymap.set({ "n", "x", "o" }, "]s", function()
  require("nvim-treesitter-textobjects.move").goto_next_start("@local.scope", "locals")
end)
vim.keymap.set({ "n", "x", "o" }, "]z", function()
  require("nvim-treesitter-textobjects.move").goto_next_start("@fold", "folds")
end)

vim.keymap.set({ "n", "x", "o" }, "]M", function()
  require("nvim-treesitter-textobjects.move").goto_next_end("@function.outer", "textobjects")
end)
vim.keymap.set({ "n", "x", "o" }, "][", function()
  require("nvim-treesitter-textobjects.move").goto_next_end("@class.outer", "textobjects")
end)

vim.keymap.set({ "n", "x", "o" }, "[m", function()
  require("nvim-treesitter-textobjects.move").goto_previous_start("@function.outer", "textobjects")
end)
vim.keymap.set({ "n", "x", "o" }, "[[", function()
  require("nvim-treesitter-textobjects.move").goto_previous_start("@class.outer", "textobjects")
end)

vim.keymap.set({ "n", "x", "o" }, "[M", function()
  require("nvim-treesitter-textobjects.move").goto_previous_end("@function.outer", "textobjects")
end)
vim.keymap.set({ "n", "x", "o" }, "[]", function()
  require("nvim-treesitter-textobjects.move").goto_previous_end("@class.outer", "textobjects")
end)

-- Go to either the start or the end, whichever is closer.
-- Use if you want more granular movements
vim.keymap.set({ "n", "x", "o" }, "]d", function()
  require("nvim-treesitter-textobjects.move").goto_next("@conditional.outer", "textobjects")
end)
vim.keymap.set({ "n", "x", "o" }, "[d", function()
  require("nvim-treesitter-textobjects.move").goto_previous("@conditional.outer", "textobjects")
end)
